RAW provider 2021/02/23 16:38:59 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/23 16:38:59 Finished
RAW provider 2021/02/23 16:38:59 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/23 16:38:59 Finished
RAW provider 2021/02/23 16:41:41 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/23 16:41:41 Finished
RAW provider 2021/02/23 16:41:42 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/23 16:41:42 Finished
RAW provider 2021/02/23 16:41:42 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/23 16:41:43 Finished
RAW provider 2021/02/23 16:43:44 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/23 16:43:44 Finished
RAW provider 2021/02/23 16:43:44 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/23 16:43:44 Finished
RAW provider 2021/02/23 16:43:44 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/23 16:43:45 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.185.183.71", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x49, 0x35, 0x49, 0x35, 0x53, 0x31, 0x57, 0x2f, 0x56, 0x78, 0x38, 0x71, 0x4f, 0x6d, 0x55, 0x4a, 0x30, 0x78, 0x57, 0x47, 0x2f, 0x73, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x4e, 0x54, 0x4d, 0x78, 0x59, 0x7a, 0x46, 0x6a, 0x4e, 0x6a, 0x67, 0x74, 0x4e, 0x6a, 0x68, 0x6c, 0x4e, 0x53, 0x30, 0x30, 0x5a, 0x44, 0x68, 0x6b, 0x4c, 0x54, 0x6b, 0x33, 0x59, 0x7a, 0x63, 0x74, 0x4e, 0x32, 0x59, 0x31, 0x4e, 0x57, 0x45, 0x31, 0x5a, 0x57, 0x4a, 0x6c, 0x4d, 0x54, 0x45, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x45, 0x78, 0x4d, 0x6a, 0x49, 0x7a, 0x4e, 0x44, 0x67, 0x31, 0x4e, 0x31, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x45, 0x78, 0x4d, 0x6a, 0x41, 0x77, 0x4e, 0x44, 0x67, 0x31, 0x4e, 0x31, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x4e, 0x54, 0x4d, 0x78, 0xa, 0x59, 0x7a, 0x46, 0x6a, 0x4e, 0x6a, 0x67, 0x74, 0x4e, 0x6a, 0x68, 0x6c, 0x4e, 0x53, 0x30, 0x30, 0x5a, 0x44, 0x68, 0x6b, 0x4c, 0x54, 0x6b, 0x33, 0x59, 0x7a, 0x63, 0x74, 0x4e, 0x32, 0x59, 0x31, 0x4e, 0x57, 0x45, 0x31, 0x5a, 0x57, 0x4a, 0x6c, 0x4d, 0x54, 0x45, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x7a, 0x6a, 0x32, 0x55, 0x4b, 0x68, 0x42, 0x52, 0x77, 0x42, 0x69, 0x78, 0x63, 0x6a, 0x30, 0x47, 0x41, 0x36, 0x2b, 0x77, 0x61, 0x66, 0x77, 0x33, 0x52, 0x33, 0x55, 0x46, 0x6e, 0x69, 0x66, 0x4e, 0x43, 0x2f, 0x4a, 0x59, 0x56, 0x68, 0x4b, 0x66, 0xa, 0x31, 0x57, 0x79, 0x73, 0x64, 0x78, 0x37, 0x72, 0x78, 0x34, 0x42, 0x6f, 0x52, 0x4f, 0x2b, 0x65, 0x54, 0x46, 0x34, 0x47, 0x55, 0x61, 0x65, 0x50, 0x41, 0x75, 0x46, 0x52, 0x37, 0x44, 0x44, 0x4e, 0x6e, 0x35, 0x59, 0x4b, 0x47, 0x6d, 0x38, 0x77, 0x67, 0x6f, 0x39, 0x49, 0x61, 0x58, 0x6e, 0x41, 0x53, 0x35, 0x4a, 0x70, 0x31, 0x6c, 0x32, 0x67, 0x61, 0x57, 0x64, 0x6c, 0x4b, 0x50, 0x64, 0x2f, 0xa, 0x62, 0x50, 0x67, 0x48, 0x78, 0x41, 0x4d, 0x53, 0x70, 0x50, 0x63, 0x69, 0x4f, 0x73, 0x36, 0x51, 0x75, 0x57, 0x49, 0x78, 0x48, 0x33, 0x51, 0x73, 0x47, 0x4f, 0x2f, 0x33, 0x38, 0x35, 0x57, 0x34, 0x45, 0x6a, 0x4e, 0x49, 0x52, 0x6b, 0x42, 0x37, 0x4d, 0x2b, 0x51, 0x6e, 0x65, 0x31, 0x46, 0x54, 0x48, 0x75, 0x54, 0x78, 0x64, 0x39, 0x73, 0x31, 0x6d, 0x53, 0x6e, 0x77, 0x4d, 0x32, 0x38, 0x37, 0xa, 0x50, 0x30, 0x62, 0x75, 0x49, 0x2f, 0x53, 0x58, 0x71, 0x74, 0x41, 0x31, 0x39, 0x38, 0x51, 0x39, 0x31, 0x6f, 0x38, 0x6b, 0x70, 0x52, 0x6f, 0x56, 0x4f, 0x74, 0x47, 0x37, 0x36, 0x75, 0x62, 0x30, 0x42, 0x65, 0x30, 0x41, 0x6f, 0x36, 0x2b, 0x62, 0x6e, 0x65, 0x5a, 0x75, 0x4f, 0x6a, 0x4f, 0x4a, 0x73, 0x4b, 0x56, 0x45, 0x41, 0x4a, 0x42, 0x6a, 0x74, 0x6f, 0x4f, 0x73, 0x72, 0x6f, 0x4b, 0x73, 0xa, 0x34, 0x62, 0x56, 0x63, 0x6a, 0x41, 0x56, 0x51, 0x57, 0x56, 0x70, 0x6d, 0x34, 0x69, 0x65, 0x38, 0x74, 0x4d, 0x46, 0x66, 0x78, 0x4a, 0x31, 0x76, 0x64, 0x71, 0x52, 0x7a, 0x72, 0x77, 0x33, 0x44, 0x75, 0x61, 0x7a, 0x44, 0x35, 0x64, 0x47, 0x45, 0x55, 0x6c, 0x46, 0x6d, 0x4a, 0x41, 0x38, 0x37, 0x4b, 0x62, 0x4d, 0x4b, 0x73, 0x54, 0x6e, 0x5a, 0x45, 0x38, 0x69, 0x32, 0x6c, 0x52, 0x64, 0x32, 0xa, 0x75, 0x68, 0x5a, 0x4f, 0x46, 0x4f, 0x54, 0x47, 0x63, 0x31, 0x57, 0x38, 0x47, 0x79, 0x6c, 0x34, 0x37, 0x64, 0x45, 0x69, 0x45, 0x4c, 0x4b, 0x2b, 0x69, 0x41, 0x48, 0x4c, 0x4e, 0x64, 0x6c, 0x50, 0x65, 0x47, 0x73, 0x30, 0x30, 0x6d, 0x4b, 0x52, 0x4e, 0x70, 0x41, 0x32, 0x36, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x76, 0x72, 0x67, 0x43, 0x56, 0x49, 0x41, 0x72, 0x47, 0x4d, 0x5a, 0x4c, 0xa, 0x63, 0x41, 0x74, 0x73, 0x69, 0x58, 0x79, 0x67, 0x34, 0x6b, 0x77, 0x30, 0x35, 0x77, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x48, 0x67, 0x77, 0x69, 0x6a, 0x59, 0x49, 0x44, 0x2b, 0x44, 0x68, 0x58, 0x38, 0x43, 0x52, 0x48, 0x4b, 0x35, 0x65, 0x70, 0x6d, 0x49, 0x36, 0xa, 0x2f, 0x75, 0x6c, 0x2b, 0x71, 0x52, 0x70, 0x46, 0x32, 0x61, 0x39, 0x33, 0x7a, 0x58, 0x66, 0x42, 0x5a, 0x4b, 0x51, 0x76, 0x61, 0x78, 0x42, 0x38, 0x6f, 0x56, 0x54, 0x6a, 0x68, 0x32, 0x48, 0x73, 0x7a, 0x56, 0x31, 0x37, 0x47, 0x6a, 0x4b, 0x59, 0x35, 0x5a, 0x78, 0x6c, 0x36, 0x2b, 0x4c, 0x51, 0x2f, 0x5a, 0x2b, 0x43, 0x4e, 0x64, 0x6a, 0x48, 0x53, 0x7a, 0x2f, 0x2b, 0x76, 0x4a, 0x4c, 0x64, 0xa, 0x55, 0x61, 0x32, 0x45, 0x75, 0x44, 0x4f, 0x4a, 0x6c, 0x4a, 0x4b, 0x2f, 0x43, 0x49, 0x59, 0x45, 0x58, 0x35, 0x49, 0x68, 0x6e, 0x65, 0x69, 0x2f, 0x73, 0x69, 0x30, 0x73, 0x2f, 0x47, 0x31, 0x53, 0x33, 0x43, 0x38, 0x53, 0x4d, 0x71, 0x47, 0x57, 0x61, 0x76, 0x39, 0x41, 0x30, 0x6a, 0x36, 0x78, 0x2b, 0x47, 0x68, 0x55, 0x54, 0x33, 0x49, 0x39, 0x31, 0x69, 0x59, 0x48, 0x5a, 0x6f, 0x4b, 0x34, 0xa, 0x61, 0x2f, 0x77, 0x73, 0x74, 0x6f, 0x51, 0x71, 0x38, 0x57, 0x36, 0x76, 0x78, 0x4b, 0x44, 0x64, 0x69, 0x57, 0x55, 0x2b, 0x35, 0x67, 0x4c, 0x43, 0x6d, 0x70, 0x6c, 0x4c, 0x44, 0x7a, 0x39, 0x68, 0x4d, 0x70, 0x68, 0x6c, 0x79, 0x58, 0x63, 0x77, 0x30, 0x41, 0x79, 0x49, 0x74, 0x71, 0x57, 0x64, 0x42, 0x79, 0x43, 0x4e, 0x4a, 0x44, 0x47, 0x61, 0x66, 0x55, 0x6f, 0x46, 0x44, 0x6d, 0x52, 0x30, 0xa, 0x68, 0x41, 0x33, 0x67, 0x44, 0x69, 0x58, 0x42, 0x61, 0x48, 0x52, 0x55, 0x51, 0x2b, 0x65, 0x42, 0x54, 0x2f, 0x51, 0x51, 0x4b, 0x44, 0x4b, 0x2f, 0x44, 0x6f, 0x4d, 0x30, 0x6d, 0x54, 0x71, 0x41, 0x34, 0x4a, 0x30, 0x38, 0x77, 0x58, 0x34, 0x55, 0x34, 0x75, 0x49, 0x59, 0x74, 0x4c, 0x61, 0x55, 0x49, 0x74, 0x77, 0x76, 0x41, 0x37, 0x4e, 0x71, 0x37, 0x77, 0x56, 0x4e, 0x63, 0x61, 0x58, 0x50, 0xa, 0x32, 0x66, 0x72, 0x74, 0x46, 0x63, 0x49, 0x48, 0x57, 0x4a, 0x2b, 0x52, 0x76, 0x72, 0x56, 0x76, 0x6e, 0x46, 0x54, 0x63, 0x4c, 0x59, 0x6e, 0x61, 0x6f, 0x55, 0x31, 0x37, 0x49, 0x66, 0x4a, 0x57, 0x62, 0x67, 0x43, 0x4e, 0x50, 0x59, 0x70, 0x68, 0x6e, 0x55, 0x44, 0x31, 0x30, 0x39, 0x36, 0x65, 0x79, 0x4a, 0x2b, 0x32, 0x6d, 0x69, 0x73, 0x69, 0x54, 0x42, 0x4e, 0x67, 0x54, 0x33, 0x77, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/02/23 16:43:47 Finished
RAW provider 2021/02/23 16:44:26 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/23 16:44:26 Finished
RAW provider 2021/02/23 16:44:26 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/23 16:44:26 Finished
RAW provider 2021/02/23 16:44:26 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/23 16:44:26 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.185.183.71", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x49, 0x35, 0x49, 0x35, 0x53, 0x31, 0x57, 0x2f, 0x56, 0x78, 0x38, 0x71, 0x4f, 0x6d, 0x55, 0x4a, 0x30, 0x78, 0x57, 0x47, 0x2f, 0x73, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x4e, 0x54, 0x4d, 0x78, 0x59, 0x7a, 0x46, 0x6a, 0x4e, 0x6a, 0x67, 0x74, 0x4e, 0x6a, 0x68, 0x6c, 0x4e, 0x53, 0x30, 0x30, 0x5a, 0x44, 0x68, 0x6b, 0x4c, 0x54, 0x6b, 0x33, 0x59, 0x7a, 0x63, 0x74, 0x4e, 0x32, 0x59, 0x31, 0x4e, 0x57, 0x45, 0x31, 0x5a, 0x57, 0x4a, 0x6c, 0x4d, 0x54, 0x45, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x45, 0x78, 0x4d, 0x6a, 0x49, 0x7a, 0x4e, 0x44, 0x67, 0x31, 0x4e, 0x31, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x45, 0x78, 0x4d, 0x6a, 0x41, 0x77, 0x4e, 0x44, 0x67, 0x31, 0x4e, 0x31, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x4e, 0x54, 0x4d, 0x78, 0xa, 0x59, 0x7a, 0x46, 0x6a, 0x4e, 0x6a, 0x67, 0x74, 0x4e, 0x6a, 0x68, 0x6c, 0x4e, 0x53, 0x30, 0x30, 0x5a, 0x44, 0x68, 0x6b, 0x4c, 0x54, 0x6b, 0x33, 0x59, 0x7a, 0x63, 0x74, 0x4e, 0x32, 0x59, 0x31, 0x4e, 0x57, 0x45, 0x31, 0x5a, 0x57, 0x4a, 0x6c, 0x4d, 0x54, 0x45, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x7a, 0x6a, 0x32, 0x55, 0x4b, 0x68, 0x42, 0x52, 0x77, 0x42, 0x69, 0x78, 0x63, 0x6a, 0x30, 0x47, 0x41, 0x36, 0x2b, 0x77, 0x61, 0x66, 0x77, 0x33, 0x52, 0x33, 0x55, 0x46, 0x6e, 0x69, 0x66, 0x4e, 0x43, 0x2f, 0x4a, 0x59, 0x56, 0x68, 0x4b, 0x66, 0xa, 0x31, 0x57, 0x79, 0x73, 0x64, 0x78, 0x37, 0x72, 0x78, 0x34, 0x42, 0x6f, 0x52, 0x4f, 0x2b, 0x65, 0x54, 0x46, 0x34, 0x47, 0x55, 0x61, 0x65, 0x50, 0x41, 0x75, 0x46, 0x52, 0x37, 0x44, 0x44, 0x4e, 0x6e, 0x35, 0x59, 0x4b, 0x47, 0x6d, 0x38, 0x77, 0x67, 0x6f, 0x39, 0x49, 0x61, 0x58, 0x6e, 0x41, 0x53, 0x35, 0x4a, 0x70, 0x31, 0x6c, 0x32, 0x67, 0x61, 0x57, 0x64, 0x6c, 0x4b, 0x50, 0x64, 0x2f, 0xa, 0x62, 0x50, 0x67, 0x48, 0x78, 0x41, 0x4d, 0x53, 0x70, 0x50, 0x63, 0x69, 0x4f, 0x73, 0x36, 0x51, 0x75, 0x57, 0x49, 0x78, 0x48, 0x33, 0x51, 0x73, 0x47, 0x4f, 0x2f, 0x33, 0x38, 0x35, 0x57, 0x34, 0x45, 0x6a, 0x4e, 0x49, 0x52, 0x6b, 0x42, 0x37, 0x4d, 0x2b, 0x51, 0x6e, 0x65, 0x31, 0x46, 0x54, 0x48, 0x75, 0x54, 0x78, 0x64, 0x39, 0x73, 0x31, 0x6d, 0x53, 0x6e, 0x77, 0x4d, 0x32, 0x38, 0x37, 0xa, 0x50, 0x30, 0x62, 0x75, 0x49, 0x2f, 0x53, 0x58, 0x71, 0x74, 0x41, 0x31, 0x39, 0x38, 0x51, 0x39, 0x31, 0x6f, 0x38, 0x6b, 0x70, 0x52, 0x6f, 0x56, 0x4f, 0x74, 0x47, 0x37, 0x36, 0x75, 0x62, 0x30, 0x42, 0x65, 0x30, 0x41, 0x6f, 0x36, 0x2b, 0x62, 0x6e, 0x65, 0x5a, 0x75, 0x4f, 0x6a, 0x4f, 0x4a, 0x73, 0x4b, 0x56, 0x45, 0x41, 0x4a, 0x42, 0x6a, 0x74, 0x6f, 0x4f, 0x73, 0x72, 0x6f, 0x4b, 0x73, 0xa, 0x34, 0x62, 0x56, 0x63, 0x6a, 0x41, 0x56, 0x51, 0x57, 0x56, 0x70, 0x6d, 0x34, 0x69, 0x65, 0x38, 0x74, 0x4d, 0x46, 0x66, 0x78, 0x4a, 0x31, 0x76, 0x64, 0x71, 0x52, 0x7a, 0x72, 0x77, 0x33, 0x44, 0x75, 0x61, 0x7a, 0x44, 0x35, 0x64, 0x47, 0x45, 0x55, 0x6c, 0x46, 0x6d, 0x4a, 0x41, 0x38, 0x37, 0x4b, 0x62, 0x4d, 0x4b, 0x73, 0x54, 0x6e, 0x5a, 0x45, 0x38, 0x69, 0x32, 0x6c, 0x52, 0x64, 0x32, 0xa, 0x75, 0x68, 0x5a, 0x4f, 0x46, 0x4f, 0x54, 0x47, 0x63, 0x31, 0x57, 0x38, 0x47, 0x79, 0x6c, 0x34, 0x37, 0x64, 0x45, 0x69, 0x45, 0x4c, 0x4b, 0x2b, 0x69, 0x41, 0x48, 0x4c, 0x4e, 0x64, 0x6c, 0x50, 0x65, 0x47, 0x73, 0x30, 0x30, 0x6d, 0x4b, 0x52, 0x4e, 0x70, 0x41, 0x32, 0x36, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x76, 0x72, 0x67, 0x43, 0x56, 0x49, 0x41, 0x72, 0x47, 0x4d, 0x5a, 0x4c, 0xa, 0x63, 0x41, 0x74, 0x73, 0x69, 0x58, 0x79, 0x67, 0x34, 0x6b, 0x77, 0x30, 0x35, 0x77, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x48, 0x67, 0x77, 0x69, 0x6a, 0x59, 0x49, 0x44, 0x2b, 0x44, 0x68, 0x58, 0x38, 0x43, 0x52, 0x48, 0x4b, 0x35, 0x65, 0x70, 0x6d, 0x49, 0x36, 0xa, 0x2f, 0x75, 0x6c, 0x2b, 0x71, 0x52, 0x70, 0x46, 0x32, 0x61, 0x39, 0x33, 0x7a, 0x58, 0x66, 0x42, 0x5a, 0x4b, 0x51, 0x76, 0x61, 0x78, 0x42, 0x38, 0x6f, 0x56, 0x54, 0x6a, 0x68, 0x32, 0x48, 0x73, 0x7a, 0x56, 0x31, 0x37, 0x47, 0x6a, 0x4b, 0x59, 0x35, 0x5a, 0x78, 0x6c, 0x36, 0x2b, 0x4c, 0x51, 0x2f, 0x5a, 0x2b, 0x43, 0x4e, 0x64, 0x6a, 0x48, 0x53, 0x7a, 0x2f, 0x2b, 0x76, 0x4a, 0x4c, 0x64, 0xa, 0x55, 0x61, 0x32, 0x45, 0x75, 0x44, 0x4f, 0x4a, 0x6c, 0x4a, 0x4b, 0x2f, 0x43, 0x49, 0x59, 0x45, 0x58, 0x35, 0x49, 0x68, 0x6e, 0x65, 0x69, 0x2f, 0x73, 0x69, 0x30, 0x73, 0x2f, 0x47, 0x31, 0x53, 0x33, 0x43, 0x38, 0x53, 0x4d, 0x71, 0x47, 0x57, 0x61, 0x76, 0x39, 0x41, 0x30, 0x6a, 0x36, 0x78, 0x2b, 0x47, 0x68, 0x55, 0x54, 0x33, 0x49, 0x39, 0x31, 0x69, 0x59, 0x48, 0x5a, 0x6f, 0x4b, 0x34, 0xa, 0x61, 0x2f, 0x77, 0x73, 0x74, 0x6f, 0x51, 0x71, 0x38, 0x57, 0x36, 0x76, 0x78, 0x4b, 0x44, 0x64, 0x69, 0x57, 0x55, 0x2b, 0x35, 0x67, 0x4c, 0x43, 0x6d, 0x70, 0x6c, 0x4c, 0x44, 0x7a, 0x39, 0x68, 0x4d, 0x70, 0x68, 0x6c, 0x79, 0x58, 0x63, 0x77, 0x30, 0x41, 0x79, 0x49, 0x74, 0x71, 0x57, 0x64, 0x42, 0x79, 0x43, 0x4e, 0x4a, 0x44, 0x47, 0x61, 0x66, 0x55, 0x6f, 0x46, 0x44, 0x6d, 0x52, 0x30, 0xa, 0x68, 0x41, 0x33, 0x67, 0x44, 0x69, 0x58, 0x42, 0x61, 0x48, 0x52, 0x55, 0x51, 0x2b, 0x65, 0x42, 0x54, 0x2f, 0x51, 0x51, 0x4b, 0x44, 0x4b, 0x2f, 0x44, 0x6f, 0x4d, 0x30, 0x6d, 0x54, 0x71, 0x41, 0x34, 0x4a, 0x30, 0x38, 0x77, 0x58, 0x34, 0x55, 0x34, 0x75, 0x49, 0x59, 0x74, 0x4c, 0x61, 0x55, 0x49, 0x74, 0x77, 0x76, 0x41, 0x37, 0x4e, 0x71, 0x37, 0x77, 0x56, 0x4e, 0x63, 0x61, 0x58, 0x50, 0xa, 0x32, 0x66, 0x72, 0x74, 0x46, 0x63, 0x49, 0x48, 0x57, 0x4a, 0x2b, 0x52, 0x76, 0x72, 0x56, 0x76, 0x6e, 0x46, 0x54, 0x63, 0x4c, 0x59, 0x6e, 0x61, 0x6f, 0x55, 0x31, 0x37, 0x49, 0x66, 0x4a, 0x57, 0x62, 0x67, 0x43, 0x4e, 0x50, 0x59, 0x70, 0x68, 0x6e, 0x55, 0x44, 0x31, 0x30, 0x39, 0x36, 0x65, 0x79, 0x4a, 0x2b, 0x32, 0x6d, 0x69, 0x73, 0x69, 0x54, 0x42, 0x4e, 0x67, 0x54, 0x33, 0x77, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/02/23 16:44:27 Finished
RAW provider 2021/02/23 16:44:46 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/23 16:44:47 Finished
RAW provider 2021/02/23 16:44:47 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/23 16:44:47 Finished
RAW provider 2021/02/23 16:44:47 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/23 16:44:47 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.185.183.71", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x49, 0x35, 0x49, 0x35, 0x53, 0x31, 0x57, 0x2f, 0x56, 0x78, 0x38, 0x71, 0x4f, 0x6d, 0x55, 0x4a, 0x30, 0x78, 0x57, 0x47, 0x2f, 0x73, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x4e, 0x54, 0x4d, 0x78, 0x59, 0x7a, 0x46, 0x6a, 0x4e, 0x6a, 0x67, 0x74, 0x4e, 0x6a, 0x68, 0x6c, 0x4e, 0x53, 0x30, 0x30, 0x5a, 0x44, 0x68, 0x6b, 0x4c, 0x54, 0x6b, 0x33, 0x59, 0x7a, 0x63, 0x74, 0x4e, 0x32, 0x59, 0x31, 0x4e, 0x57, 0x45, 0x31, 0x5a, 0x57, 0x4a, 0x6c, 0x4d, 0x54, 0x45, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x45, 0x78, 0x4d, 0x6a, 0x49, 0x7a, 0x4e, 0x44, 0x67, 0x31, 0x4e, 0x31, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x45, 0x78, 0x4d, 0x6a, 0x41, 0x77, 0x4e, 0x44, 0x67, 0x31, 0x4e, 0x31, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x4e, 0x54, 0x4d, 0x78, 0xa, 0x59, 0x7a, 0x46, 0x6a, 0x4e, 0x6a, 0x67, 0x74, 0x4e, 0x6a, 0x68, 0x6c, 0x4e, 0x53, 0x30, 0x30, 0x5a, 0x44, 0x68, 0x6b, 0x4c, 0x54, 0x6b, 0x33, 0x59, 0x7a, 0x63, 0x74, 0x4e, 0x32, 0x59, 0x31, 0x4e, 0x57, 0x45, 0x31, 0x5a, 0x57, 0x4a, 0x6c, 0x4d, 0x54, 0x45, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x7a, 0x6a, 0x32, 0x55, 0x4b, 0x68, 0x42, 0x52, 0x77, 0x42, 0x69, 0x78, 0x63, 0x6a, 0x30, 0x47, 0x41, 0x36, 0x2b, 0x77, 0x61, 0x66, 0x77, 0x33, 0x52, 0x33, 0x55, 0x46, 0x6e, 0x69, 0x66, 0x4e, 0x43, 0x2f, 0x4a, 0x59, 0x56, 0x68, 0x4b, 0x66, 0xa, 0x31, 0x57, 0x79, 0x73, 0x64, 0x78, 0x37, 0x72, 0x78, 0x34, 0x42, 0x6f, 0x52, 0x4f, 0x2b, 0x65, 0x54, 0x46, 0x34, 0x47, 0x55, 0x61, 0x65, 0x50, 0x41, 0x75, 0x46, 0x52, 0x37, 0x44, 0x44, 0x4e, 0x6e, 0x35, 0x59, 0x4b, 0x47, 0x6d, 0x38, 0x77, 0x67, 0x6f, 0x39, 0x49, 0x61, 0x58, 0x6e, 0x41, 0x53, 0x35, 0x4a, 0x70, 0x31, 0x6c, 0x32, 0x67, 0x61, 0x57, 0x64, 0x6c, 0x4b, 0x50, 0x64, 0x2f, 0xa, 0x62, 0x50, 0x67, 0x48, 0x78, 0x41, 0x4d, 0x53, 0x70, 0x50, 0x63, 0x69, 0x4f, 0x73, 0x36, 0x51, 0x75, 0x57, 0x49, 0x78, 0x48, 0x33, 0x51, 0x73, 0x47, 0x4f, 0x2f, 0x33, 0x38, 0x35, 0x57, 0x34, 0x45, 0x6a, 0x4e, 0x49, 0x52, 0x6b, 0x42, 0x37, 0x4d, 0x2b, 0x51, 0x6e, 0x65, 0x31, 0x46, 0x54, 0x48, 0x75, 0x54, 0x78, 0x64, 0x39, 0x73, 0x31, 0x6d, 0x53, 0x6e, 0x77, 0x4d, 0x32, 0x38, 0x37, 0xa, 0x50, 0x30, 0x62, 0x75, 0x49, 0x2f, 0x53, 0x58, 0x71, 0x74, 0x41, 0x31, 0x39, 0x38, 0x51, 0x39, 0x31, 0x6f, 0x38, 0x6b, 0x70, 0x52, 0x6f, 0x56, 0x4f, 0x74, 0x47, 0x37, 0x36, 0x75, 0x62, 0x30, 0x42, 0x65, 0x30, 0x41, 0x6f, 0x36, 0x2b, 0x62, 0x6e, 0x65, 0x5a, 0x75, 0x4f, 0x6a, 0x4f, 0x4a, 0x73, 0x4b, 0x56, 0x45, 0x41, 0x4a, 0x42, 0x6a, 0x74, 0x6f, 0x4f, 0x73, 0x72, 0x6f, 0x4b, 0x73, 0xa, 0x34, 0x62, 0x56, 0x63, 0x6a, 0x41, 0x56, 0x51, 0x57, 0x56, 0x70, 0x6d, 0x34, 0x69, 0x65, 0x38, 0x74, 0x4d, 0x46, 0x66, 0x78, 0x4a, 0x31, 0x76, 0x64, 0x71, 0x52, 0x7a, 0x72, 0x77, 0x33, 0x44, 0x75, 0x61, 0x7a, 0x44, 0x35, 0x64, 0x47, 0x45, 0x55, 0x6c, 0x46, 0x6d, 0x4a, 0x41, 0x38, 0x37, 0x4b, 0x62, 0x4d, 0x4b, 0x73, 0x54, 0x6e, 0x5a, 0x45, 0x38, 0x69, 0x32, 0x6c, 0x52, 0x64, 0x32, 0xa, 0x75, 0x68, 0x5a, 0x4f, 0x46, 0x4f, 0x54, 0x47, 0x63, 0x31, 0x57, 0x38, 0x47, 0x79, 0x6c, 0x34, 0x37, 0x64, 0x45, 0x69, 0x45, 0x4c, 0x4b, 0x2b, 0x69, 0x41, 0x48, 0x4c, 0x4e, 0x64, 0x6c, 0x50, 0x65, 0x47, 0x73, 0x30, 0x30, 0x6d, 0x4b, 0x52, 0x4e, 0x70, 0x41, 0x32, 0x36, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x76, 0x72, 0x67, 0x43, 0x56, 0x49, 0x41, 0x72, 0x47, 0x4d, 0x5a, 0x4c, 0xa, 0x63, 0x41, 0x74, 0x73, 0x69, 0x58, 0x79, 0x67, 0x34, 0x6b, 0x77, 0x30, 0x35, 0x77, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x48, 0x67, 0x77, 0x69, 0x6a, 0x59, 0x49, 0x44, 0x2b, 0x44, 0x68, 0x58, 0x38, 0x43, 0x52, 0x48, 0x4b, 0x35, 0x65, 0x70, 0x6d, 0x49, 0x36, 0xa, 0x2f, 0x75, 0x6c, 0x2b, 0x71, 0x52, 0x70, 0x46, 0x32, 0x61, 0x39, 0x33, 0x7a, 0x58, 0x66, 0x42, 0x5a, 0x4b, 0x51, 0x76, 0x61, 0x78, 0x42, 0x38, 0x6f, 0x56, 0x54, 0x6a, 0x68, 0x32, 0x48, 0x73, 0x7a, 0x56, 0x31, 0x37, 0x47, 0x6a, 0x4b, 0x59, 0x35, 0x5a, 0x78, 0x6c, 0x36, 0x2b, 0x4c, 0x51, 0x2f, 0x5a, 0x2b, 0x43, 0x4e, 0x64, 0x6a, 0x48, 0x53, 0x7a, 0x2f, 0x2b, 0x76, 0x4a, 0x4c, 0x64, 0xa, 0x55, 0x61, 0x32, 0x45, 0x75, 0x44, 0x4f, 0x4a, 0x6c, 0x4a, 0x4b, 0x2f, 0x43, 0x49, 0x59, 0x45, 0x58, 0x35, 0x49, 0x68, 0x6e, 0x65, 0x69, 0x2f, 0x73, 0x69, 0x30, 0x73, 0x2f, 0x47, 0x31, 0x53, 0x33, 0x43, 0x38, 0x53, 0x4d, 0x71, 0x47, 0x57, 0x61, 0x76, 0x39, 0x41, 0x30, 0x6a, 0x36, 0x78, 0x2b, 0x47, 0x68, 0x55, 0x54, 0x33, 0x49, 0x39, 0x31, 0x69, 0x59, 0x48, 0x5a, 0x6f, 0x4b, 0x34, 0xa, 0x61, 0x2f, 0x77, 0x73, 0x74, 0x6f, 0x51, 0x71, 0x38, 0x57, 0x36, 0x76, 0x78, 0x4b, 0x44, 0x64, 0x69, 0x57, 0x55, 0x2b, 0x35, 0x67, 0x4c, 0x43, 0x6d, 0x70, 0x6c, 0x4c, 0x44, 0x7a, 0x39, 0x68, 0x4d, 0x70, 0x68, 0x6c, 0x79, 0x58, 0x63, 0x77, 0x30, 0x41, 0x79, 0x49, 0x74, 0x71, 0x57, 0x64, 0x42, 0x79, 0x43, 0x4e, 0x4a, 0x44, 0x47, 0x61, 0x66, 0x55, 0x6f, 0x46, 0x44, 0x6d, 0x52, 0x30, 0xa, 0x68, 0x41, 0x33, 0x67, 0x44, 0x69, 0x58, 0x42, 0x61, 0x48, 0x52, 0x55, 0x51, 0x2b, 0x65, 0x42, 0x54, 0x2f, 0x51, 0x51, 0x4b, 0x44, 0x4b, 0x2f, 0x44, 0x6f, 0x4d, 0x30, 0x6d, 0x54, 0x71, 0x41, 0x34, 0x4a, 0x30, 0x38, 0x77, 0x58, 0x34, 0x55, 0x34, 0x75, 0x49, 0x59, 0x74, 0x4c, 0x61, 0x55, 0x49, 0x74, 0x77, 0x76, 0x41, 0x37, 0x4e, 0x71, 0x37, 0x77, 0x56, 0x4e, 0x63, 0x61, 0x58, 0x50, 0xa, 0x32, 0x66, 0x72, 0x74, 0x46, 0x63, 0x49, 0x48, 0x57, 0x4a, 0x2b, 0x52, 0x76, 0x72, 0x56, 0x76, 0x6e, 0x46, 0x54, 0x63, 0x4c, 0x59, 0x6e, 0x61, 0x6f, 0x55, 0x31, 0x37, 0x49, 0x66, 0x4a, 0x57, 0x62, 0x67, 0x43, 0x4e, 0x50, 0x59, 0x70, 0x68, 0x6e, 0x55, 0x44, 0x31, 0x30, 0x39, 0x36, 0x65, 0x79, 0x4a, 0x2b, 0x32, 0x6d, 0x69, 0x73, 0x69, 0x54, 0x42, 0x4e, 0x67, 0x54, 0x33, 0x77, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/02/23 16:44:48 Finished
RAW provider 2021/02/23 16:44:52 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/darwin_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2021/02/23 16:44:52 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://35.185.183.71", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:api.AuthProviderConfig{Name: "gcp", Config: map[string]string{--- REDACTED ---}}, AuthConfigPersister:rest.AuthProviderConfigPersister(--- REDACTED ---), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x44, 0x4b, 0x7a, 0x43, 0x43, 0x41, 0x68, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x52, 0x41, 0x49, 0x35, 0x49, 0x35, 0x53, 0x31, 0x57, 0x2f, 0x56, 0x78, 0x38, 0x71, 0x4f, 0x6d, 0x55, 0x4a, 0x30, 0x78, 0x57, 0x47, 0x2f, 0x73, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x77, 0xa, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x4e, 0x54, 0x4d, 0x78, 0x59, 0x7a, 0x46, 0x6a, 0x4e, 0x6a, 0x67, 0x74, 0x4e, 0x6a, 0x68, 0x6c, 0x4e, 0x53, 0x30, 0x30, 0x5a, 0x44, 0x68, 0x6b, 0x4c, 0x54, 0x6b, 0x33, 0x59, 0x7a, 0x63, 0x74, 0x4e, 0x32, 0x59, 0x31, 0x4e, 0x57, 0x45, 0x31, 0x5a, 0x57, 0x4a, 0x6c, 0x4d, 0x54, 0x45, 0x34, 0xa, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x78, 0x4d, 0x44, 0x45, 0x78, 0x4d, 0x6a, 0x49, 0x7a, 0x4e, 0x44, 0x67, 0x31, 0x4e, 0x31, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x32, 0x4d, 0x44, 0x45, 0x78, 0x4d, 0x6a, 0x41, 0x77, 0x4e, 0x44, 0x67, 0x31, 0x4e, 0x31, 0x6f, 0x77, 0x4c, 0x7a, 0x45, 0x74, 0x4d, 0x43, 0x73, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x78, 0x4d, 0x6b, 0x4e, 0x54, 0x4d, 0x78, 0xa, 0x59, 0x7a, 0x46, 0x6a, 0x4e, 0x6a, 0x67, 0x74, 0x4e, 0x6a, 0x68, 0x6c, 0x4e, 0x53, 0x30, 0x30, 0x5a, 0x44, 0x68, 0x6b, 0x4c, 0x54, 0x6b, 0x33, 0x59, 0x7a, 0x63, 0x74, 0x4e, 0x32, 0x59, 0x31, 0x4e, 0x57, 0x45, 0x31, 0x5a, 0x57, 0x4a, 0x6c, 0x4d, 0x54, 0x45, 0x34, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0xa, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x7a, 0x6a, 0x32, 0x55, 0x4b, 0x68, 0x42, 0x52, 0x77, 0x42, 0x69, 0x78, 0x63, 0x6a, 0x30, 0x47, 0x41, 0x36, 0x2b, 0x77, 0x61, 0x66, 0x77, 0x33, 0x52, 0x33, 0x55, 0x46, 0x6e, 0x69, 0x66, 0x4e, 0x43, 0x2f, 0x4a, 0x59, 0x56, 0x68, 0x4b, 0x66, 0xa, 0x31, 0x57, 0x79, 0x73, 0x64, 0x78, 0x37, 0x72, 0x78, 0x34, 0x42, 0x6f, 0x52, 0x4f, 0x2b, 0x65, 0x54, 0x46, 0x34, 0x47, 0x55, 0x61, 0x65, 0x50, 0x41, 0x75, 0x46, 0x52, 0x37, 0x44, 0x44, 0x4e, 0x6e, 0x35, 0x59, 0x4b, 0x47, 0x6d, 0x38, 0x77, 0x67, 0x6f, 0x39, 0x49, 0x61, 0x58, 0x6e, 0x41, 0x53, 0x35, 0x4a, 0x70, 0x31, 0x6c, 0x32, 0x67, 0x61, 0x57, 0x64, 0x6c, 0x4b, 0x50, 0x64, 0x2f, 0xa, 0x62, 0x50, 0x67, 0x48, 0x78, 0x41, 0x4d, 0x53, 0x70, 0x50, 0x63, 0x69, 0x4f, 0x73, 0x36, 0x51, 0x75, 0x57, 0x49, 0x78, 0x48, 0x33, 0x51, 0x73, 0x47, 0x4f, 0x2f, 0x33, 0x38, 0x35, 0x57, 0x34, 0x45, 0x6a, 0x4e, 0x49, 0x52, 0x6b, 0x42, 0x37, 0x4d, 0x2b, 0x51, 0x6e, 0x65, 0x31, 0x46, 0x54, 0x48, 0x75, 0x54, 0x78, 0x64, 0x39, 0x73, 0x31, 0x6d, 0x53, 0x6e, 0x77, 0x4d, 0x32, 0x38, 0x37, 0xa, 0x50, 0x30, 0x62, 0x75, 0x49, 0x2f, 0x53, 0x58, 0x71, 0x74, 0x41, 0x31, 0x39, 0x38, 0x51, 0x39, 0x31, 0x6f, 0x38, 0x6b, 0x70, 0x52, 0x6f, 0x56, 0x4f, 0x74, 0x47, 0x37, 0x36, 0x75, 0x62, 0x30, 0x42, 0x65, 0x30, 0x41, 0x6f, 0x36, 0x2b, 0x62, 0x6e, 0x65, 0x5a, 0x75, 0x4f, 0x6a, 0x4f, 0x4a, 0x73, 0x4b, 0x56, 0x45, 0x41, 0x4a, 0x42, 0x6a, 0x74, 0x6f, 0x4f, 0x73, 0x72, 0x6f, 0x4b, 0x73, 0xa, 0x34, 0x62, 0x56, 0x63, 0x6a, 0x41, 0x56, 0x51, 0x57, 0x56, 0x70, 0x6d, 0x34, 0x69, 0x65, 0x38, 0x74, 0x4d, 0x46, 0x66, 0x78, 0x4a, 0x31, 0x76, 0x64, 0x71, 0x52, 0x7a, 0x72, 0x77, 0x33, 0x44, 0x75, 0x61, 0x7a, 0x44, 0x35, 0x64, 0x47, 0x45, 0x55, 0x6c, 0x46, 0x6d, 0x4a, 0x41, 0x38, 0x37, 0x4b, 0x62, 0x4d, 0x4b, 0x73, 0x54, 0x6e, 0x5a, 0x45, 0x38, 0x69, 0x32, 0x6c, 0x52, 0x64, 0x32, 0xa, 0x75, 0x68, 0x5a, 0x4f, 0x46, 0x4f, 0x54, 0x47, 0x63, 0x31, 0x57, 0x38, 0x47, 0x79, 0x6c, 0x34, 0x37, 0x64, 0x45, 0x69, 0x45, 0x4c, 0x4b, 0x2b, 0x69, 0x41, 0x48, 0x4c, 0x4e, 0x64, 0x6c, 0x50, 0x65, 0x47, 0x73, 0x30, 0x30, 0x6d, 0x4b, 0x52, 0x4e, 0x70, 0x41, 0x32, 0x36, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x30, 0x49, 0x77, 0x51, 0x44, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0xa, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66, 0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x41, 0x67, 0x51, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x54, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x76, 0x72, 0x67, 0x43, 0x56, 0x49, 0x41, 0x72, 0x47, 0x4d, 0x5a, 0x4c, 0xa, 0x63, 0x41, 0x74, 0x73, 0x69, 0x58, 0x79, 0x67, 0x34, 0x6b, 0x77, 0x30, 0x35, 0x77, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x48, 0x67, 0x77, 0x69, 0x6a, 0x59, 0x49, 0x44, 0x2b, 0x44, 0x68, 0x58, 0x38, 0x43, 0x52, 0x48, 0x4b, 0x35, 0x65, 0x70, 0x6d, 0x49, 0x36, 0xa, 0x2f, 0x75, 0x6c, 0x2b, 0x71, 0x52, 0x70, 0x46, 0x32, 0x61, 0x39, 0x33, 0x7a, 0x58, 0x66, 0x42, 0x5a, 0x4b, 0x51, 0x76, 0x61, 0x78, 0x42, 0x38, 0x6f, 0x56, 0x54, 0x6a, 0x68, 0x32, 0x48, 0x73, 0x7a, 0x56, 0x31, 0x37, 0x47, 0x6a, 0x4b, 0x59, 0x35, 0x5a, 0x78, 0x6c, 0x36, 0x2b, 0x4c, 0x51, 0x2f, 0x5a, 0x2b, 0x43, 0x4e, 0x64, 0x6a, 0x48, 0x53, 0x7a, 0x2f, 0x2b, 0x76, 0x4a, 0x4c, 0x64, 0xa, 0x55, 0x61, 0x32, 0x45, 0x75, 0x44, 0x4f, 0x4a, 0x6c, 0x4a, 0x4b, 0x2f, 0x43, 0x49, 0x59, 0x45, 0x58, 0x35, 0x49, 0x68, 0x6e, 0x65, 0x69, 0x2f, 0x73, 0x69, 0x30, 0x73, 0x2f, 0x47, 0x31, 0x53, 0x33, 0x43, 0x38, 0x53, 0x4d, 0x71, 0x47, 0x57, 0x61, 0x76, 0x39, 0x41, 0x30, 0x6a, 0x36, 0x78, 0x2b, 0x47, 0x68, 0x55, 0x54, 0x33, 0x49, 0x39, 0x31, 0x69, 0x59, 0x48, 0x5a, 0x6f, 0x4b, 0x34, 0xa, 0x61, 0x2f, 0x77, 0x73, 0x74, 0x6f, 0x51, 0x71, 0x38, 0x57, 0x36, 0x76, 0x78, 0x4b, 0x44, 0x64, 0x69, 0x57, 0x55, 0x2b, 0x35, 0x67, 0x4c, 0x43, 0x6d, 0x70, 0x6c, 0x4c, 0x44, 0x7a, 0x39, 0x68, 0x4d, 0x70, 0x68, 0x6c, 0x79, 0x58, 0x63, 0x77, 0x30, 0x41, 0x79, 0x49, 0x74, 0x71, 0x57, 0x64, 0x42, 0x79, 0x43, 0x4e, 0x4a, 0x44, 0x47, 0x61, 0x66, 0x55, 0x6f, 0x46, 0x44, 0x6d, 0x52, 0x30, 0xa, 0x68, 0x41, 0x33, 0x67, 0x44, 0x69, 0x58, 0x42, 0x61, 0x48, 0x52, 0x55, 0x51, 0x2b, 0x65, 0x42, 0x54, 0x2f, 0x51, 0x51, 0x4b, 0x44, 0x4b, 0x2f, 0x44, 0x6f, 0x4d, 0x30, 0x6d, 0x54, 0x71, 0x41, 0x34, 0x4a, 0x30, 0x38, 0x77, 0x58, 0x34, 0x55, 0x34, 0x75, 0x49, 0x59, 0x74, 0x4c, 0x61, 0x55, 0x49, 0x74, 0x77, 0x76, 0x41, 0x37, 0x4e, 0x71, 0x37, 0x77, 0x56, 0x4e, 0x63, 0x61, 0x58, 0x50, 0xa, 0x32, 0x66, 0x72, 0x74, 0x46, 0x63, 0x49, 0x48, 0x57, 0x4a, 0x2b, 0x52, 0x76, 0x72, 0x56, 0x76, 0x6e, 0x46, 0x54, 0x63, 0x4c, 0x59, 0x6e, 0x61, 0x6f, 0x55, 0x31, 0x37, 0x49, 0x66, 0x4a, 0x57, 0x62, 0x67, 0x43, 0x4e, 0x50, 0x59, 0x70, 0x68, 0x6e, 0x55, 0x44, 0x31, 0x30, 0x39, 0x36, 0x65, 0x79, 0x4a, 0x2b, 0x32, 0x6d, 0x69, 0x73, 0x69, 0x54, 0x42, 0x4e, 0x67, 0x54, 0x33, 0x77, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2021/02/23 16:44:52 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "domains": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "domains": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=25) "networking.gke.io/v1beta2",
   (string) (len=4) "kind": (string) (len=18) "ManagedCertificate",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=11) "auto-assign",
    (string) (len=9) "namespace": (string) (len=15) "auto-assign-bot"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "domains": ([]interface {}) (len=1 cap=1) {
     (string) (len=23) "auto-assign-bot.diag.vn"
    }
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=25) "networking.gke.io/v1beta2",
   (string) (len=4) "kind": (string) (len=18) "ManagedCertificate",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=11) "auto-assign",
    (string) (len=9) "namespace": (string) (len=15) "auto-assign-bot"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "domains": ([]interface {}) (len=1 cap=1) {
     (string) (len=23) "auto-assign-bot.diag.vn"
    }
   }
  }
 }
}

RAW provider 2021/02/23 16:44:52 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2021/02/23 16:44:52 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2021/02/23 16:44:53 [ApplyResourceChange][Create] API response:
(*unstructured.Unstructured)(0xc000112000)({
 Object: (map[string]interface {}) (len=4) {
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=7) "domains": ([]interface {}) (len=1 cap=1) {
    (string) (len=23) "auto-assign-bot.diag.vn"
   }
  },
  (string) (len=10) "apiVersion": (string) (len=25) "networking.gke.io/v1beta2",
  (string) (len=4) "kind": (string) (len=18) "ManagedCertificate",
  (string) (len=8) "metadata": (map[string]interface {}) (len=8) {
   (string) (len=10) "generation": (int64) 1,
   (string) (len=13) "managedFields": ([]interface {}) (len=1 cap=1) {
    (map[string]interface {}) (len=6) {
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=1) {
      (string) (len=6) "f:spec": (map[string]interface {}) (len=1) {
       (string) (len=9) "f:domains": (map[string]interface {}) {
       }
      }
     },
     (string) (len=7) "manager": (string) (len=9) "Terraform",
     (string) (len=9) "operation": (string) (len=5) "Apply",
     (string) (len=4) "time": (string) (len=20) "2021-02-23T09:44:53Z",
     (string) (len=10) "apiVersion": (string) (len=25) "networking.gke.io/v1beta2",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1"
    }
   },
   (string) (len=4) "name": (string) (len=11) "auto-assign",
   (string) (len=9) "namespace": (string) (len=15) "auto-assign-bot",
   (string) (len=15) "resourceVersion": (string) (len=8) "27521219",
   (string) (len=8) "selfLink": (string) (len=90) "/apis/networking.gke.io/v1beta2/namespaces/auto-assign-bot/managedcertificates/auto-assign",
   (string) (len=3) "uid": (string) (len=36) "0f9d043f-ab6e-4952-9934-64a0d7fedfb9",
   (string) (len=17) "creationTimestamp": (string) (len=20) "2021-02-23T09:44:53Z"
  }
 }
})

RAW provider 2021/02/23 16:44:53 [ApplyResourceChange][Create] transformed response:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=4) {
    (string) (len=10) "apiVersion": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=4) "kind": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=8) "metadata": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=2) {
       (string) (len=4) "name": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=9) "namespace": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=4) "spec": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=7) "domains": (cty.Type) {
        typeImpl: (cty.typeTuple) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElemTypes: ([]cty.Type) (len=1 cap=1) {
          (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=4) {
  (string) (len=10) "apiVersion": (string) (len=25) "networking.gke.io/v1beta2",
  (string) (len=4) "kind": (string) (len=18) "ManagedCertificate",
  (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
   (string) (len=4) "name": (string) (len=11) "auto-assign",
   (string) (len=9) "namespace": (string) (len=15) "auto-assign-bot"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=1) {
   (string) (len=7) "domains": ([]interface {}) (len=1 cap=1) {
    (string) (len=23) "auto-assign-bot.diag.vn"
   }
  }
 }
}

RAW provider 2021/02/23 16:44:53 [ApplyResourceChange][Create] transformed new state:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "domains": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "domains": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "domains": ([]interface {}) (len=1 cap=1) {
     (string) (len=23) "auto-assign-bot.diag.vn"
    }
   },
   (string) (len=10) "apiVersion": (string) (len=25) "networking.gke.io/v1beta2",
   (string) (len=4) "kind": (string) (len=18) "ManagedCertificate",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=11) "auto-assign",
    (string) (len=9) "namespace": (string) (len=15) "auto-assign-bot"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=25) "networking.gke.io/v1beta2",
   (string) (len=4) "kind": (string) (len=18) "ManagedCertificate",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=11) "auto-assign",
    (string) (len=9) "namespace": (string) (len=15) "auto-assign-bot"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=1) {
    (string) (len=7) "domains": ([]interface {}) (len=1 cap=1) {
     (string) (len=23) "auto-assign-bot.diag.vn"
    }
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}
RAW provider 2021/02/23 16:44:53 Finished
